8:45 AM TO 5:45 PM

SESSION1: 8:45 AM - 10:40 AM
SB1 : 10:40 AM TO 11:00 AM
LAB1 : 11:00 AM TO 1:00 PM [executions-assignments]

LUNCH BREAK : 1:00 PM To 2:00 PM 

SESSION2 : 2:00 PM To 3:40 PM 
SB2 : 3:40 PM TO 4:00 PM 
LAB2 : 4:00 PM TO 5:45 PM [executions-assignments]


1. Syntax:
2. Example:
3. Task:
4. Scenario based execution:


-> Core Java:
-> HTML5 CSS3 and JavaScript
-> React
-> J2EE 

	JavaFullStack Developer

Web Developer: 
	Role and Responsibity:  Develop,Build,Test,Deploy,Maintain

Tools:
	-> Setting up JDK: Java Development Kit
	   -------------
			-> Download JDK : version 11/17/22 etc...			
				Executing HelloWorld without eclipse 
				step1: Creating a new file: HelloWorld.java
				Step2: Writing HelloWorld Program
				step3: Save File as HelloWorld.java
				step4: javac HelloWorld.java <- this command generated HelloWorld.class automatically
				step5: java HelloWorld
				
	


	-> Eclipse IDE: Integrated Development Environment
			we maintain Java Projects

			 -> Setting Eclipse IDE
				File -> New -> Project -> Java Project -> 

			-> Executing HelloWorld with Java

	java --version
	
	Task:
		1. What is web Programning
		2. Features of Java 
		3. Steps to setup jdk 
		4. Write a Welcome.java Program to display welcome message.

 
		-> variables and functions
		-> operators,conditions and loops
		-> data types: primitive and non primitive
		-> String,Arrays,Collection etc..
		


	

	Overview of Data Structures

		Classification of Data Structures: Linear vs Non-Linear
			Linear Data Structures
				Static Data Structures - Arrays

					-> Multi dimension Array:
								Syntax:  datatype [][] array_ref_var;
									 int [][] arr = new int[3][3];

				Dynamic Data Structures - Queue, Stack, Linked List 
					Allocates memory at Runtime

							Queue:
								-> Add Queue Element : queueEnque
								-> Remove Quque Element : queueDeque
								-> Display Quque Element : queueDisplay

			

		
			Imlementing Linked List in Java
				Definition and types: Single, Double, Circular

				     -------------->
				List: 10 20 30 40 50 
					head == null
						data next=null

						data = 10
						next = null	
					
					head == new Node
					-------------------------

					Node last = new Node
						 
						data = 20
						next = null
					-------------------------

				Double Linked List:	   
					   ------>   -------->  ------>  ----->
				      10        20        30        40      50
					   <------   <------   <------   <-----

					   next = null
					 ptr.key  = 10
					   prev = null

						next = null
						 ptr.key = 20
						prev = first
								
						  

			
				




				Basic operations
					Insert at beginning, Insert at end, Insert at position, Delete node, Update node, Display

			Implementing Stacks in Java
				Definition and characteristics
				Basic operations: Push, Pop, Peek, isEmpty

			Implementing Queues in Java
				Definition and types: Simple, Circular, Priority, Double Ended
				Basic operations: Enqueue, Dequeue, Peek, isEmpty


			Non-Linear Data Structures
				Tree, Graph, Has Tables, Sets, Heaps, Tries

			HashTable:
				HashTable class implements a hash table, which maps keys to values.

				In order to store and retrive objects from a hastable,the objects used as keys must implement the hashCde method 
				and equals method.


----------------------------------------------------------------------------------------------------------------------------

		Search Algorithms for the above Data Structures (Problem Type)

			Linear Search (Strategy: Brute Force): Sequential Search

				Applications:

				-> Small data set
				-> Searching LinkedList
				-> Simple Implementations.

				Advantages:

				-> Used irrspective od wherther array is sorted or not.
				-> It can be used on arrays of any data type
				-> well suited for small data set.
				
				DisAdvantage:

				-> slow for large dataset.
				> Not suitable for large datset.




			Binary Search (Strategy: Divide and Conquer)
				Array should be sorted
				mid = low + (high-low)/2

				[ 10 20 30 40 50 ], 40
				   0  1 2  3  4   <- array index

				itreration1:

				low =  0
				high = 4

				mid = 0 + (4 - 0)/ 2
				mid = 2
				
				30 == 40
				
				30 < 40
					low = 2 + 1
					low = 3

				
				iteration2:
				low = 3
				high = 5
				mid = 3 + (4 - 3) /2
				mid = 3

				40 == 40
					return 3
				

				
				
				

			Jump Search (Strategy: Divide and Conquer)
			
			
			Product search by Id using Binary Search 
			Product Search by Id using Jump Search



		Sort Algorithms for the above Data Structures (Problem Type)
			Bubble Sort (Strategy: Exchanging)
			Quick Sort (Strategy: Divide and Conquer)
			Merge Sort (Strategy: Divide and Conquer)
			Heap Sort (Strategy: Selection)

--------------------------------------------------------------------------------------------------------------------------
Implementing Tree in Java
	Definition and types: Binary, AVL, Red-Black, Tries, Heaps

	

	Basic operations: Insert, Search, Delete, Traversal (In-order(Left->Root->Right), 
							    Pre-order(Root->Left->Right), 
							    Post-order(Left->Right->Root))

-----------------------------------------------------------------------------------------------
		root 
	left		right

	
---------------------------------------------------------------------------------------------
	Iteration1:   
			check root is null ? yes 
				create a new node with value 1 and set as root
							key = 1 and root = 1
	Iteration2:

			check root is null ? no
			2 < 1 ? no
			2 > 1 ? yes
				create a new node with value 2 and set as right child of root
							key = 2 and root = 1
											1
												2			
	Iteration3:
			check root is null ? No
			3 < 1 ? no
			3 > 1 ? yes
				check if right child of root(2) is null: No
			3 < right child(2) ? : No
			3 > right child(2) ? : Yes
				check if right child of Node (2) is null : Yes
			
				create a new node with value 3 and set as right child of node(2)

											1
												2
													3
												

	Iteration4:
			check root is null ? No
			4 < 1 ? no
			4 > 1 ? yes
				check if right child of root(2) is null: No
			4 < right child(2) ? : No
			4 > right child(2) ? : Yes
				check if right child of Node (3) is null : No
			4 < right child(3)? : No
			4 > right child(3)? : Yes
				check if right child of Node (3) is null : Yes
				create a new node with value 4 and set as right child of node(3)
			
											1
												2
													3
														4
															5	
			
			
-----------------------------------------------------------------------------------------------

Implementing Graph in Java
	Definition and types: Directed, Undirected, Weighted, Unweighted, Directed Acyclic

	Basic operations: Add Vertex, Add Edge, Display

		Graph:
			Its a non linear Data Structure consisting of vertices and edges.
				vertices: nodes
				edges: lines connecting 2 nodes 

		1. Adjacency Matrix

					0	1	2

				0		1	1	

				1	1		1

				2	1	1









		2. Adjacenct List:

				An array of list is used to store edges between two vertices.


			

Tree and Graph (Collection) Algorithms (Problem Type)
	Breadth-First Search (Strategy: Queue)
	Depth-First Search (Strategy: Stack)
	Union-Find Algorithm for Cycle Detection (Strategy: Disjoint Set)

Graph Algorithms (Problem Type)
-------------------------------

	1. Dijkstra’s Algorithm (Strategy: Greedy Method)
	
		finding the shortest paths between nodes in graph.

		-> I - Initialiazation:

			step1: set the distance to the source node to 0.

			step2: set the distance to all other nodes to Infinity.

			step3: Mark all nodes as unvisited

			step4: set the source ode as the current node.
		
		-> II - Visit the Current Node:
			
			step1: For the current node,consider all of its unvisited neighbors.

			step2: For Each neighbor,calculate the tentative distance from the source node.
				This is the distance to the current node plus the distance from the current node to the neighbor.

			step3:If this tentative distance is less than the currently known distance,update the shortest distance to the neighbor.

			
		->III - Mark the Current Node as Visited:

			Step1: Mark the current node as visited.

		-> IV - Select the Next Node:
			
			Step1: Select the unvisited node with the smallest tentative distance and set it as the new current node.

			step2: Repeat steps II ,III,IV until all nodes have been visited.

		-> V - End of the Algorithm:

			-> when all nodes have been visited,the alogrithm ends.
				The shortest distances to all nodes from the cource node are known.

			Example:
			--------

				
				
					10
				(A) ----- (B)
				 | \       |

				1|   4\	   |1

				 |      \  | 
				(C) ------(D)
				     2

				start with node 'A':
				Initialization:
						dist[A]=0
						dist[B]=∞
						dist[C]=∞
						dist[D]=∞
				Set A as current node.


				Iteration1:
					Current node : 'A'
						Neighbors: 'B','C','D'

						Tentaive Distances:
							'dist[B]=min(∞, 0 + 10) = 10
							'dist[C]=min(∞, 0 + 1) = 1
							'dist[D]=min(∞, 0 + 4) = 4
						
						Mark 'A' as visited.
						Set 'C' as the next node (smallest tentative distance)




				Iteration2:
					Current node : 'C'
						Neighbors: 'A','D'

						Tentaive Distances:
							
							'dist[A]=min(0, 1 + 1) = 0(No change)
							'dist[D]=min(4, 1 + 2) = 3
						
						Mark 'C' as visited.
						Set 'D' as the next node (smallest tentative distance)

				Iteration3:
					Current node : 'D'
						Neighbors: 'B','C'

						Tentaive Distances:
							
							'dist[B]=min(10, 3 + 1) = 4
							'dist[C]=min(1, 3 + 2) = 1(no change)
						
						Mark 'D' as visited.
						Set 'B' as the next node (smallest tentative distance)


				Iteration4:
					Current node : 'B'
						Neighbors: 'A','D'

						Tentaive Distances:
							
							'dist[A]=min(0, 4 + 10) = 0(No change)
							'dist[D]=min(3, 4 + 1) = 3 (No change)
						
						Mark 'B' as visited.
						

			Final distances:
					dist[A]=0
					dist[B]=4
					dist[C]=1
					dist[D]=3
				



	2. Floyd-Warshall Algorithm (Strategy: Dynamic Programming)

		finding the shortest paths between all pairs of vertices in a weighted graph.

I - Initialization:

	step1: Create a 2D array dist where dist[i][j] represents the shortest distance from vertex i to vertex j.

	step2: Initialize dist[i][j] to be the weight of the edge from i to j if it exists, and ∞ (infinity) if it doesn't. 
				Set dist[i][i] to 0 for all i.

II - Dynamic Programming:

	step1: Use each vertex as an intermediate point and try to improve the shortest path between every pair of vertices (i, j).
	
	step2: For each pair (i, j), update dist[i][j] to be the minimum of 
		dist[i][j] and dist[i][k] + dist[k][j] for every possible intermediate vertex k.

	step3:
		Repesat step2 for all vertices k to consider all possible intermediate vertices.


Result:

	After considering all vertices as intermediate points, 
	dist[i][j] will contain the shortest distance from vertex i to vertex j.

	Consider the following graph:
				    10
				(0)----- (1)
				 | 	 |
				1| 	 | 2
				 |       |
				(2)-----(3)
				     1
		The adjacency matrix representation of the graph, where ∞ (infinity) represents no direct path between the vertices, is:
------------------------------------------------------------------------------------------
	Initial Distance Matrix:

			0	1	2	3

		0	0      10      1       inf

		1       10     0	inf     2

		2 	1      inf     0        1

		3	inf    2        1       0
-----------------------------------------------------------------------------------------
		Iteration1:

		k = 0: update distances using vertex 0 as an intermediate

			0	1	2	3

		0	0      10      1       inf

		1       10     0	11     2

		2 	1      11     0        1

		3	inf    2        1       0

-----------------------------------------------------------------------------------------
		Iteration2:

		k = 1: update distances using vertex 1 as an intermediate

			0	1	2	3

		0	0      10      1       12

		1       10     0	11     2

		2 	1      11     0        1

		3	12    2        1       0
-----------------------------------------------------------------------------------------
		Iteration3:

		k = 2: update distances using vertex 2 as an intermediate vertex

			0	1	2	3

		0	0      10      1       12

		1       10     0       11      2

		2 	1      11     0        1

		3	2     2        1       0
-----------------------------------------------------------------------------------------
		Iteration4:

		k = 3: update distances using vertex 3 as an intermediate vertex

			0	1	2	3

		0	0      4       1       2

		1       4      0       3       2

		2 	1      3       0        1

		3	2     2        1       0

			



	3. Kruskal’s Minimum Spanning Tree Algorithm (Strategy: Greedy Method)

		Kruskal’s Minimum Spanning Tree Algorithm (Strategy: Greedy Method)

Algorithm steps: 
	step1: Sort all edges in the graph in non-decreasing order of their weight.
	step2: Pick the smallest edge.check if it forms a cycle with Spanning tree formed.
		If cycle is not formed ,include this edge else discard it.


				8		7
			1  ---------	2 -----------3
		  4 /   |		|\	     | \
		  /	|		|  \  	     |   \
		  0	|	     /  8    \4	     |14  4
		   \	|        /	|	\    |   /
		   8\	|  /	7	|	  \  | /
			7 ----------	6 ---------- 5
				1		2

		Weight Source Destination
		 1      7        6              

		 2      8	 2
		 2      6        5

		 4      0        1
		 4	2	 5

		 6      8        6

		 7      2	 3
		 7      7        8

		 8	0	 7
		 8	1	 2

		 9      3        4

		10      5        4

		11	1        7
		
		14	3	 5


						7
			1  		2 -----------3
		  4 /   	       2|\	      \9
		  /			|  \  	        \
		  0		       8    \4	         4
		   \	       		\       
		   8\	  			  \   
			7 ----------	6 ---------- 5
				1		2
      

	4. Bellman-Ford Algorithm (Strategy: Dynamic Programming)

		Bellman-Ford Algorithm (Strategy: Dynamic Programming)

--------------------------------------------------------

	It starts with a single source and calculates the distance to each node.

		The distance is initially unknown and assumed to be infinite ,as the time goes on,the algorithm relaxes
		those paths by identifying a few shorter paths. Principle of Relaxation.

		



					2
				(B)		(D)
			   5				2
			
			(A)	 1		-1	 (F)

						       -3
				(C)	1	(E)
---------------------------------------------------------------------------------------------------------------


	Step 1:
					2
				(B)		(D)
			   5	(∞)		(∞)	2
		source	
		------>	(A)	 1		-1	 (F)	dist[] = A	B	C	D	E	F
			(0)				 (∞)		 0	∞	∞	∞	∞	∞
						       -3
				(C)	1	(E)
				(∞)		(∞)


-----------------------------------------------------------------------------------------------------------------


	Step 2: Start relaxing the edges, during 1st Relaxation:

						2
				(B)		(D)
			   5	(5)		(∞)	2
		source	
		------>	(A)	 1		-1	 (F)	dist[] = A	B	C	D	E	F
			(0)				 (∞)		 0	5	∞	∞	∞	∞
						       -3
				(C)	1	(E)
				(∞)		(∞)

	

		Dist[A] + 5 < Dist[B]
		  0     + 5 < (∞)
		Dist[B] = 5

---------------------------------------------------------------------------------------------------------------------


	Step3: 2nd Relaxation


			-> Current Distance of D > (Dist of B) + (weight of B to D ) i.e ∞ > 5 + 2
					Dist[D] = 7

			-> Current Distance of C > (Dist of B) + (weight of B to C )i.e  ∞ > 5 + 1
					Dist[C] = 6

			
						2
				(B)		(D)
			   5	(5)		(7)	2
		source	
		------>	(A)	 1		-1	 (F)	dist[] = A	B	C	D	E	F
			(0)				 (∞)		 0	5	6	7	∞	∞
						       -3
				(C)	1	(E)
				(6)		(∞)

	

		Dist[B] + 2 < Dist[D]
		  5     + 2 < (∞)
		Dist[D] = 7

		...................
		Dist[B] + 1 < Dist[C]
		  5     + 1 < (∞)
		Dist[C] = 6
		
--------------------------------------------------------------------------------------------------------------------


	Step4: 3rd Relaxation

			-> Current Distance of F > (Dist of D) + (weight of D to F ) i.e ∞ > 7 + 2
					Dist[F] = 9

			-> Current Distance of E > (Dist of C) + (weight of C to E )i.e  ∞ > 6 + 1
					Dist[E] = 7

			
						2
				(B)		(D)
			   5	(5)		(7)	2
		source	
		------>	(A)	 1		-1	 (F)	dist[] = A	B	C	D	E	F
			(0)				 (9)		 0	5	6	7	7	9
						       -3
				(C)	1	(E)
				(6)		(7)

	

		Dist[D] + 2 < Dist[F]
		  9     + 2 < (∞)
		Dist[F] = 9

		...................
		Dist[C] + 1 < Dist[E]
		  6     + 1 < (∞)
		Dist[E] = 7
-----------------------------------------------------------------------------------------------------------

Step5: 4rd Relaxation

			-> Current Distance of D > (Dist of E) + (weight of E to D ) i.e 7 > 7 + (-1)
					Dist[D] = 6

			-> Current Distance of F > (Dist of F) + (weight of F to E )i.e  7 > 9 + (-3)
					Dist[E] = 6

			
						2
				(B)		(D)
			   5	(5)		(6)	2
		source	
		------>	(A)	 1		-1	 (F)	dist[] = A	B	C	D	E	F
			(0)				 (9)		 0	5	6	7	7	9
						       -3
				(C)	1	(E)
				(6)		(6)

	

		Dist[E] + 2 < Dist[D]
		  7     + (-1) < 7
		Dist[D] = 6

		...................
		Dist[F] + 1 < Dist[E]
		  9     + (-3) < (6)
		Dist[E] = 6
----------------------------------------------------------------------------------------------------------------------
Step6: 5TH Relaxation

			-> Current Distance of F > (Dist of D) + (weight of D to F ) i.e 9 > 6 + 2
					Dist[F] = 8

			-> Current Distance of D > (Dist of E) + (weight of F to D )i.e  6 > 6 + (-1)
					Dist[E] = 5

			
						2
				(B)		(D)
			   5	(5)		(5)	2
		source	
		------>	(A)	 1		-1	 (F)	dist[] = A	B	C	D	E	F
			(0)				 (8)		 0	5	6	5	6	8
						       -3
				(C)	1	(E)
				(6)		(6)

	

		Dist[E] + 2 < Dist[D]
		  6     + (-1) < 6
		Dist[D] = 5

		...................
		Dist[D] + 2 < Dist[F]
		  6     + 2 < 9
		Dist[F] = 8

----------------------------------------------------------------------------------------------------------------------------

Step7:
final Relaxation: it should indicate the presence of negative cycle if there is any changes in the
		 distance array of 5th relaxation.
		


			-> Current Distance of E > (Dist of F) + (weight of F to E ) i.e 6 > 8 + (-3)
					Dist[E] = 5

			-> Current Distance of F > (Dist of D) + (weight of D to F )i.e  8 > 5 + 2
					Dist[F] = 7

			
						2
				(B)		(D)
			   5	(5)		(5)	2
		source	
		------>	(A)	 1		-1	 (F)	dist[] = A	B	C	D	E	F
			(0)				 (7)		 0	5	6	4	5	7
						       -3
				(C)	1	(E)
				(6)		(5)

	

		Dist[F] + (-3) < Dist[E]
		  8     + (-3) < 6
		Dist[E] = 5

		...................
		Dist[D] + 2 < Dist[F]
		  6     + 2 < 8
		Dist[F] = 7


					


	Result: A Negative cycle D -> F -> E exist in graph


------------------------------------------------------------------------------------------------------------------------


Rabin-Karp Algorithm (Strategy: Hashing)

	Text = "ABBCCDDAEFG";
	pattern = "CDD";
	Alphabet size(d) :  256
	Prime Number (q) :  101

	1. hash = (256 square) mod 101 = 65536 mod 11 = 88

	2  A=65 B=66 C=67  D=68

		p = (67.256 square +  68.256 + 68 ) mod 101 = (67*65536 + 68*256+ 68) mod 101 
	
	
		
	
	Deterministic Finite Automation: (DFA)

		For each input symbol: one can determine the state to which the machine will move.

			It has a finite number of states
			
			DFA consists of 5 tuples {Q, Σ, q, F, δ}. 

		Q: set of all states.
		Σ: set of input symbols. (Symbols which machine takes as input)
		q: Initial state. (Starting state of a machine)
		F: set of final state.
		δ: Transition Function, defined as δ: Q X Σ --> Q.


		Graphical Representation of DFA:
		
			state diagram
					-> vertices represent the states
					-> arcs labeled  withan input alphabet show the transitions
					-> initial state is denoted by an empty single incoming arc
					-> final state is indicated by double circles.


			Example:

				Q = {a,b,c},
				Σ = {0,1},
				Q0 = {a},
				F = {c}

				δ: Transition Function:

				Present state 		Next State 		Next State for
							input 0			Input1

					a		a			b

					b		c			a

					c		b			c

			Steps to Generate the Hash Value

Step 1: Choose Parameters
Alphabet size (d): The number of characters in the input alphabet. For ASCII, d = 256.
Prime number (q): A prime number used to mod the hash value to avoid overflow and reduce collisions. For example, q = 101.

Step 2: Calculate the Initial Hash Value for the Pattern and the First Window of the Text
The hash value is calculated using a polynomial hash function.
 For a string s of length m, the hash value is computed as follows:

	hash(s)=(s[0]⋅d pow(m−1)+s[1]⋅d pow(m−2)+…+s[m−2]⋅d+s[m−1]) mod q
Where:

s[i] is the ASCII value of the i-th character of the string s.
d is the number of characters in the input alphabet.
q is a prime number.

Step1: Calculate h:
		Calculate h as 𝑑 pow( 𝑚 − 1) mod 𝑞 d (m−1) mod q, where m is the length of the pattern.

		h=(d pow(m−1)) mod q=(256 pow(2)) mod 101= 65536 mod 101 = 88

Step2: Compute the Initial Hash Values:
Compute the hash value for the pattern and the first window of the text.

		Pattern "CDD":
		hash(CDD)=(C⋅d pow(2)+ D⋅d+ D) mod q
		

		Convert characters to ASCII values (C=67, D=68):
		
		hash(CDD)=(67⋅256 pow(2)+68⋅256+68) mod q

		Simplify using modulo arithmetic:

		hash(CDD)=(67⋅65536+68⋅256+68) mod 101

		Calculate step-by-step:

			67⋅65536 mod 101=67⋅88 mod 101=5896 mod 101=37

			68⋅256 mod 101=68⋅256 mod 101=17408 mod 101=50

			hash(CDD)=(37+50+68) mod 101=155 mod 101=54

			First window of the text "ABC":

				hash(ABC)=(A⋅d2+B⋅d+C)mod q

			Convert characters to ASCII values (A=65, B=66, C=67):


			hash(ABC)=(65⋅256 pow(2)+66⋅256+67) mod q

			Simplify using modulo arithmetic:


				hash(ABC)=(65⋅65536+66⋅256+67) mod 101

			Calculate step-by-step:

				65⋅65536 mod 101=65⋅88 mod 101=5720 mod 101=65


				66⋅256 mod 101=66⋅256 mod 101=16896 mod 101=77

				hash(ABC)=(65+77+67) mod 101= 209 mod 101 = 7



